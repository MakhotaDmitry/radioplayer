/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package radioplayer;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.Executors;
import javax.swing.UIManager;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;
//import sun.swing.icon.SortArrowIcon;

/**
 *
 * @author dmitry
 */
public class AppJFrame extends javax.swing.JFrame {

    private Player player = null;
    SortedSwingListModel modelListSources = new SortedSwingListModel();

    /**
     * Creates new form AppJFrame
     */
    public AppJFrame() {
//  example parsing:
//  <source src='http://mp3.metroaudio1.stream.avstreaming.net:7200/metro' type='audio/mpeg' />

        try {
            UIManager.setLookAndFeel("com.formdev.flatlaf.FlatDarkLaf");
//            IntelliJTheme.install(AppJFrame.class.getResourceAsStream(
//                    "/com/myapp/themes/arc-theme-orange.theme.json"));
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }

        initComponents();
        jListSources.setModel(this.modelListSources);
        ReadDB();
    }

    public void playRadioStream(String spec) throws IOException, JavaLayerException {
        // Connection
        URLConnection urlConnection = new URL(spec).openConnection();

        // If you have proxy
        //        Properties systemSettings = System.getProperties ();
        //        systemSettings.put ( "proxySet", true );
        //        systemSettings.put ( "http.proxyHost", "host" );
        //        systemSettings.put ( "http.proxyPort", "port" );
        // If you have proxy auth
        //        BASE64Encoder encoder = new BASE64Encoder ();
        //        String encoded = encoder.encode ( ( "login:pass" ).getBytes () );
        //        urlConnection.setRequestProperty ( "Proxy-Authorization", "Basic " + encoded );
        // Connecting
        urlConnection.connect();

        // Playing
        if (this.player != null) {
            this.player.close();
        }
        this.player = new Player(urlConnection.getInputStream());
        this.player.play();
    }

    private void ReadDB() {
        Connection conn = null;
        try {
            // db parameters
            String url = "jdbc:sqlite::resource:db/radioplayer.sqlite";
            // create a connection to the database
            conn = DriverManager.getConnection(url);

//            System.out.println("Connection to SQLite has been established.");
            String sql = "SELECT title, url FROM RadioStations";

            try {
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql);
                while (rs.next()) {
                    this.modelListSources.add(rs.getString("url").trim());
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnPlay = new javax.swing.JButton();
        jSliderVolume = new javax.swing.JSlider();
        jBtnStop = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListSources = new javax.swing.JList<>();
        jBtnAddSource = new javax.swing.JButton();
        jTextFieldNewSource = new javax.swing.JTextField();
        jBtnClearListSources = new javax.swing.JButton();
        jLblCurrentStation = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RadioPlayer");

        jBtnPlay.setText("Play");
        jBtnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPlayActionPerformed(evt);
            }
        });

        jSliderVolume.setToolTipText("Volume");
        jSliderVolume.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderVolumeStateChanged(evt);
            }
        });
        jSliderVolume.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jSliderVolumeMouseWheelMoved(evt);
            }
        });

        jBtnStop.setText("Stop");
        jBtnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnStopActionPerformed(evt);
            }
        });

        jListSources.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListSourcesMouseClicked(evt);
            }
        });
        jListSources.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListSourcesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jListSources);

        jBtnAddSource.setText("Add Source");
        jBtnAddSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddSourceActionPerformed(evt);
            }
        });

        jBtnClearListSources.setText("List Clear");
        jBtnClearListSources.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnClearListSourcesActionPerformed(evt);
            }
        });

        jLblCurrentStation.setText("jLblCurrentStation");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jBtnClearListSources)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSliderVolume, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBtnPlay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnStop))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldNewSource)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnAddSource))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLblCurrentStation)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNewSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnAddSource))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLblCurrentStation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnStop)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtnPlay)
                        .addComponent(jBtnClearListSources)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSliderVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Play() {
        Executors.newSingleThreadExecutor().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    playRadioStream(jListSources.getSelectedValue());
                    jLblCurrentStation.setText("Current station: " + jListSources.getSelectedValue());
                } catch (IOException e) {
                    System.out.println(e);
//                    e.printStackTrace();
                } catch (JavaLayerException e) {
                    System.out.println(e);
//                    e.printStackTrace();
                }
            }
        });
    }
    private void jBtnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPlayActionPerformed
        Play();
    }//GEN-LAST:event_jBtnPlayActionPerformed

    private void jBtnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnStopActionPerformed
        if (this.player != null)
            this.player.close();
    }//GEN-LAST:event_jBtnStopActionPerformed

    private void jListSourcesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListSourcesKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_DELETE:
                this.modelListSources.removeElement(jListSources.getSelectedValue());
                break;
        }
    }//GEN-LAST:event_jListSourcesKeyPressed

    private void jBtnAddSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddSourceActionPerformed
        if (jTextFieldNewSource.getText().length() == 0) {
            return;
        }

        this.modelListSources.add(jTextFieldNewSource.getText().trim());
        jTextFieldNewSource.setText("");
    }//GEN-LAST:event_jBtnAddSourceActionPerformed

    private void jListSourcesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListSourcesMouseClicked
        if (evt.getClickCount() == 2) {
            Play();
        }
    }//GEN-LAST:event_jListSourcesMouseClicked

    private void jBtnClearListSourcesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnClearListSourcesActionPerformed
        this.modelListSources.clear();
    }//GEN-LAST:event_jBtnClearListSourcesActionPerformed

    private void jSliderVolumeMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jSliderVolumeMouseWheelMoved
        int value = jSliderVolume.getValue();
        int value_min = jSliderVolume.getMinimum();
        int value_max = jSliderVolume.getMaximum();

        if (evt.getWheelRotation() < 0) {
            jSliderVolume.setValue(value + 5);
        } else {
            jSliderVolume.setValue(value - 5);
        }

//        if (evt.isControlDown()) {
//            if (evt.getWheelRotation() < 0) {
//                jSliderVolume.setValue(value + 5);
//            } else {
//                jSliderVolume.setValue(value - 5);
//            }
//        }
        System.out.println("value: " + value);
        System.out.println("value_min: " + value_min);
        System.out.println("value_max: " + value_max);
    }//GEN-LAST:event_jSliderVolumeMouseWheelMoved

    private void jSliderVolumeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderVolumeStateChanged
        jSliderVolume.setToolTipText("Volume: " + jSliderVolume.getValue());
    }//GEN-LAST:event_jSliderVolumeStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAddSource;
    private javax.swing.JButton jBtnClearListSources;
    private javax.swing.JButton jBtnPlay;
    private javax.swing.JButton jBtnStop;
    private javax.swing.JLabel jLblCurrentStation;
    private javax.swing.JList<String> jListSources;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSliderVolume;
    private javax.swing.JTextField jTextFieldNewSource;
    // End of variables declaration//GEN-END:variables
}
